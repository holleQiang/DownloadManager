package com.zhangqiang.downloadmanager.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangqiang.downloadmanager.db.entity.HttpTaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HTTP_TASK_ENTITY".
*/
public class HttpTaskEntityDao extends AbstractDao<HttpTaskEntity, String> {

    public static final String TABLENAME = "HTTP_TASK_ENTITY";

    /**
     * Properties of entity HttpTaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property SaveDir = new Property(2, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property TargetFileName = new Property(4, String.class, "targetFileName", false, "TARGET_FILE_NAME");
        public final static Property ContentLength = new Property(5, long.class, "contentLength", false, "CONTENT_LENGTH");
        public final static Property ContentType = new Property(6, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property CreateTime = new Property(7, java.util.Date.class, "createTime", false, "CREATE_TIME");
        public final static Property ThreadSize = new Property(8, int.class, "threadSize", false, "THREAD_SIZE");
        public final static Property State = new Property(9, int.class, "state", false, "STATE");
        public final static Property ErrorMsg = new Property(10, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property Type = new Property(11, int.class, "type", false, "TYPE");
        public final static Property ChildId = new Property(12, String.class, "childId", false, "CHILD_ID");
    }


    public HttpTaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HttpTaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HTTP_TASK_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"SAVE_DIR\" TEXT NOT NULL ," + // 2: saveDir
                "\"FILE_NAME\" TEXT NOT NULL ," + // 3: fileName
                "\"TARGET_FILE_NAME\" TEXT," + // 4: targetFileName
                "\"CONTENT_LENGTH\" INTEGER NOT NULL ," + // 5: contentLength
                "\"CONTENT_TYPE\" TEXT," + // 6: contentType
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"THREAD_SIZE\" INTEGER NOT NULL ," + // 8: threadSize
                "\"STATE\" INTEGER NOT NULL ," + // 9: state
                "\"ERROR_MSG\" TEXT," + // 10: errorMsg
                "\"TYPE\" INTEGER NOT NULL ," + // 11: type
                "\"CHILD_ID\" TEXT);"); // 12: childId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HTTP_TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HttpTaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getSaveDir());
        stmt.bindString(4, entity.getFileName());
 
        String targetFileName = entity.getTargetFileName();
        if (targetFileName != null) {
            stmt.bindString(5, targetFileName);
        }
        stmt.bindLong(6, entity.getContentLength());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(7, contentType);
        }
        stmt.bindLong(8, entity.getCreateTime().getTime());
        stmt.bindLong(9, entity.getThreadSize());
        stmt.bindLong(10, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(11, errorMsg);
        }
        stmt.bindLong(12, entity.getType());
 
        String childId = entity.getChildId();
        if (childId != null) {
            stmt.bindString(13, childId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HttpTaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getSaveDir());
        stmt.bindString(4, entity.getFileName());
 
        String targetFileName = entity.getTargetFileName();
        if (targetFileName != null) {
            stmt.bindString(5, targetFileName);
        }
        stmt.bindLong(6, entity.getContentLength());
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(7, contentType);
        }
        stmt.bindLong(8, entity.getCreateTime().getTime());
        stmt.bindLong(9, entity.getThreadSize());
        stmt.bindLong(10, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(11, errorMsg);
        }
        stmt.bindLong(12, entity.getType());
 
        String childId = entity.getChildId();
        if (childId != null) {
            stmt.bindString(13, childId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HttpTaskEntity readEntity(Cursor cursor, int offset) {
        HttpTaskEntity entity = new HttpTaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.getString(offset + 2), // saveDir
            cursor.getString(offset + 3), // fileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // targetFileName
            cursor.getLong(offset + 5), // contentLength
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // contentType
            new java.util.Date(cursor.getLong(offset + 7)), // createTime
            cursor.getInt(offset + 8), // threadSize
            cursor.getInt(offset + 9), // state
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // errorMsg
            cursor.getInt(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // childId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HttpTaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setSaveDir(cursor.getString(offset + 2));
        entity.setFileName(cursor.getString(offset + 3));
        entity.setTargetFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentLength(cursor.getLong(offset + 5));
        entity.setContentType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setThreadSize(cursor.getInt(offset + 8));
        entity.setState(cursor.getInt(offset + 9));
        entity.setErrorMsg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.getInt(offset + 11));
        entity.setChildId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HttpTaskEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(HttpTaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HttpTaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
