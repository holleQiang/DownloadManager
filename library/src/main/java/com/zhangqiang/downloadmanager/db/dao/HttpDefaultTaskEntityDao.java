package com.zhangqiang.downloadmanager.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangqiang.downloadmanager.db.entity.HttpDefaultTaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HTTP_DEFAULT_TASK_ENTITY".
*/
public class HttpDefaultTaskEntityDao extends AbstractDao<HttpDefaultTaskEntity, String> {

    public static final String TABLENAME = "HTTP_DEFAULT_TASK_ENTITY";

    /**
     * Properties of entity HttpDefaultTaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property CurrentLength = new Property(1, long.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property State = new Property(2, int.class, "state", false, "STATE");
        public final static Property ErrorMsg = new Property(3, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property CreateTime = new Property(4, long.class, "createTime", false, "CREATE_TIME");
    }


    public HttpDefaultTaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public HttpDefaultTaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HTTP_DEFAULT_TASK_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 1: currentLength
                "\"STATE\" INTEGER NOT NULL ," + // 2: state
                "\"ERROR_MSG\" TEXT," + // 3: errorMsg
                "\"CREATE_TIME\" INTEGER NOT NULL );"); // 4: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HTTP_DEFAULT_TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HttpDefaultTaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCurrentLength());
        stmt.bindLong(3, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(4, errorMsg);
        }
        stmt.bindLong(5, entity.getCreateTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HttpDefaultTaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindLong(2, entity.getCurrentLength());
        stmt.bindLong(3, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(4, errorMsg);
        }
        stmt.bindLong(5, entity.getCreateTime());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public HttpDefaultTaskEntity readEntity(Cursor cursor, int offset) {
        HttpDefaultTaskEntity entity = new HttpDefaultTaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getLong(offset + 1), // currentLength
            cursor.getInt(offset + 2), // state
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // errorMsg
            cursor.getLong(offset + 4) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HttpDefaultTaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCurrentLength(cursor.getLong(offset + 1));
        entity.setState(cursor.getInt(offset + 2));
        entity.setErrorMsg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(HttpDefaultTaskEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(HttpDefaultTaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HttpDefaultTaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
