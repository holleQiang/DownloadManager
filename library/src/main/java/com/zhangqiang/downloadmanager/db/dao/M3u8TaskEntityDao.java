package com.zhangqiang.downloadmanager.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangqiang.downloadmanager.db.entity.M3u8TaskEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "M3U8_TASK_ENTITY".
*/
public class M3u8TaskEntityDao extends AbstractDao<M3u8TaskEntity, String> {

    public static final String TABLENAME = "M3U8_TASK_ENTITY";

    /**
     * Properties of entity M3u8TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property SaveDir = new Property(2, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property TargetFileName = new Property(3, String.class, "targetFileName", false, "TARGET_FILE_NAME");
        public final static Property SaveFileName = new Property(4, String.class, "saveFileName", false, "SAVE_FILE_NAME");
        public final static Property CreateTime = new Property(5, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Duration = new Property(6, float.class, "duration", false, "DURATION");
        public final static Property M3u8Info = new Property(7, String.class, "m3u8Info", false, "M3U8_INFO");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
        public final static Property ErrorMsg = new Property(9, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property TsIds = new Property(10, String.class, "tsIds", false, "TS_IDS");
    }


    public M3u8TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public M3u8TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"M3U8_TASK_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"URL\" TEXT NOT NULL ," + // 1: url
                "\"SAVE_DIR\" TEXT NOT NULL ," + // 2: saveDir
                "\"TARGET_FILE_NAME\" TEXT," + // 3: targetFileName
                "\"SAVE_FILE_NAME\" TEXT," + // 4: saveFileName
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 5: createTime
                "\"DURATION\" REAL NOT NULL ," + // 6: duration
                "\"M3U8_INFO\" TEXT," + // 7: m3u8Info
                "\"STATE\" INTEGER NOT NULL ," + // 8: state
                "\"ERROR_MSG\" TEXT," + // 9: errorMsg
                "\"TS_IDS\" TEXT);"); // 10: tsIds
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"M3U8_TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, M3u8TaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getSaveDir());
 
        String targetFileName = entity.getTargetFileName();
        if (targetFileName != null) {
            stmt.bindString(4, targetFileName);
        }
 
        String saveFileName = entity.getSaveFileName();
        if (saveFileName != null) {
            stmt.bindString(5, saveFileName);
        }
        stmt.bindLong(6, entity.getCreateTime());
        stmt.bindDouble(7, entity.getDuration());
 
        String m3u8Info = entity.getM3u8Info();
        if (m3u8Info != null) {
            stmt.bindString(8, m3u8Info);
        }
        stmt.bindLong(9, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(10, errorMsg);
        }
 
        String tsIds = entity.getTsIds();
        if (tsIds != null) {
            stmt.bindString(11, tsIds);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, M3u8TaskEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getUrl());
        stmt.bindString(3, entity.getSaveDir());
 
        String targetFileName = entity.getTargetFileName();
        if (targetFileName != null) {
            stmt.bindString(4, targetFileName);
        }
 
        String saveFileName = entity.getSaveFileName();
        if (saveFileName != null) {
            stmt.bindString(5, saveFileName);
        }
        stmt.bindLong(6, entity.getCreateTime());
        stmt.bindDouble(7, entity.getDuration());
 
        String m3u8Info = entity.getM3u8Info();
        if (m3u8Info != null) {
            stmt.bindString(8, m3u8Info);
        }
        stmt.bindLong(9, entity.getState());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(10, errorMsg);
        }
 
        String tsIds = entity.getTsIds();
        if (tsIds != null) {
            stmt.bindString(11, tsIds);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public M3u8TaskEntity readEntity(Cursor cursor, int offset) {
        M3u8TaskEntity entity = new M3u8TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // url
            cursor.getString(offset + 2), // saveDir
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // targetFileName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // saveFileName
            cursor.getLong(offset + 5), // createTime
            cursor.getFloat(offset + 6), // duration
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // m3u8Info
            cursor.getInt(offset + 8), // state
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // errorMsg
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // tsIds
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, M3u8TaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.getString(offset + 1));
        entity.setSaveDir(cursor.getString(offset + 2));
        entity.setTargetFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSaveFileName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreateTime(cursor.getLong(offset + 5));
        entity.setDuration(cursor.getFloat(offset + 6));
        entity.setM3u8Info(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setState(cursor.getInt(offset + 8));
        entity.setErrorMsg(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTsIds(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final String updateKeyAfterInsert(M3u8TaskEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(M3u8TaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(M3u8TaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
