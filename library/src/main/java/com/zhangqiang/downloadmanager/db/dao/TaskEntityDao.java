package com.zhangqiang.downloadmanager.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.zhangqiang.downloadmanager.db.entity.TaskEntity;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TASK_ENTITY".
*/
public class TaskEntityDao extends AbstractDao<TaskEntity, Long> {

    public static final String TABLENAME = "TASK_ENTITY";

    /**
     * Properties of entity TaskEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property SaveDir = new Property(2, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property FileName = new Property(3, String.class, "fileName", false, "FILE_NAME");
        public final static Property CurrentLength = new Property(4, long.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property ContentLength = new Property(5, long.class, "contentLength", false, "CONTENT_LENGTH");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property ETag = new Property(7, String.class, "eTag", false, "E_TAG");
        public final static Property LastModified = new Property(8, String.class, "lastModified", false, "LAST_MODIFIED");
        public final static Property ContentType = new Property(9, String.class, "contentType", false, "CONTENT_TYPE");
        public final static Property CreateTime = new Property(10, long.class, "createTime", false, "CREATE_TIME");
        public final static Property ErrorMsg = new Property(11, String.class, "errorMsg", false, "ERROR_MSG");
        public final static Property ThreadSize = new Property(12, int.class, "threadSize", false, "THREAD_SIZE");
    }

    private DaoSession daoSession;


    public TaskEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TaskEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TASK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URL\" TEXT," + // 1: url
                "\"SAVE_DIR\" TEXT," + // 2: saveDir
                "\"FILE_NAME\" TEXT," + // 3: fileName
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 4: currentLength
                "\"CONTENT_LENGTH\" INTEGER NOT NULL ," + // 5: contentLength
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"E_TAG\" TEXT," + // 7: eTag
                "\"LAST_MODIFIED\" TEXT," + // 8: lastModified
                "\"CONTENT_TYPE\" TEXT," + // 9: contentType
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 10: createTime
                "\"ERROR_MSG\" TEXT," + // 11: errorMsg
                "\"THREAD_SIZE\" INTEGER NOT NULL );"); // 12: threadSize
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TASK_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String saveDir = entity.getSaveDir();
        if (saveDir != null) {
            stmt.bindString(3, saveDir);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getContentLength());
        stmt.bindLong(7, entity.getState());
 
        String eTag = entity.getETag();
        if (eTag != null) {
            stmt.bindString(8, eTag);
        }
 
        String lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindString(9, lastModified);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(10, contentType);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(12, errorMsg);
        }
        stmt.bindLong(13, entity.getThreadSize());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaskEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }
 
        String saveDir = entity.getSaveDir();
        if (saveDir != null) {
            stmt.bindString(3, saveDir);
        }
 
        String fileName = entity.getFileName();
        if (fileName != null) {
            stmt.bindString(4, fileName);
        }
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getContentLength());
        stmt.bindLong(7, entity.getState());
 
        String eTag = entity.getETag();
        if (eTag != null) {
            stmt.bindString(8, eTag);
        }
 
        String lastModified = entity.getLastModified();
        if (lastModified != null) {
            stmt.bindString(9, lastModified);
        }
 
        String contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindString(10, contentType);
        }
        stmt.bindLong(11, entity.getCreateTime());
 
        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(12, errorMsg);
        }
        stmt.bindLong(13, entity.getThreadSize());
    }

    @Override
    protected final void attachEntity(TaskEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaskEntity readEntity(Cursor cursor, int offset) {
        TaskEntity entity = new TaskEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // saveDir
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileName
            cursor.getLong(offset + 4), // currentLength
            cursor.getLong(offset + 5), // contentLength
            cursor.getInt(offset + 6), // state
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // eTag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // lastModified
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // contentType
            cursor.getLong(offset + 10), // createTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // errorMsg
            cursor.getInt(offset + 12) // threadSize
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaskEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSaveDir(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFileName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCurrentLength(cursor.getLong(offset + 4));
        entity.setContentLength(cursor.getLong(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setETag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLastModified(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContentType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreateTime(cursor.getLong(offset + 10));
        entity.setErrorMsg(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setThreadSize(cursor.getInt(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaskEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaskEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaskEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
