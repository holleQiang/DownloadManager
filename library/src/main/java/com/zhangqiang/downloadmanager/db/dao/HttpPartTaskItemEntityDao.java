package com.zhangqiang.downloadmanager.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhangqiang.downloadmanager.db.entity.HttpPartTaskItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "HTTP_PART_TASK_ITEM_ENTITY".
 */
public class HttpPartTaskItemEntityDao extends AbstractDao<HttpPartTaskItemEntity, String> {

    public static final String TABLENAME = "HTTP_PART_TASK_ITEM_ENTITY";

    /**
     * Properties of entity HttpPartTaskItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property SaveDir = new Property(1, String.class, "saveDir", false, "SAVE_DIR");
        public final static Property SaveFileName = new Property(2, String.class, "saveFileName", false, "SAVE_FILE_NAME");
        public final static Property StartPosition = new Property(3, long.class, "startPosition", false, "START_POSITION");
        public final static Property CurrentLength = new Property(4, long.class, "currentLength", false, "CURRENT_LENGTH");
        public final static Property EndPosition = new Property(5, long.class, "endPosition", false, "END_POSITION");
        public final static Property State = new Property(6, int.class, "state", false, "STATE");
        public final static Property CreateTime = new Property(7, long.class, "createTime", false, "CREATE_TIME");
        public final static Property ErrorMsg = new Property(8, String.class, "errorMsg", false, "ERROR_MSG");
    }


    public HttpPartTaskItemEntityDao(DaoConfig config) {
        super(config);
    }

    public HttpPartTaskItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"HTTP_PART_TASK_ITEM_ENTITY\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"SAVE_DIR\" TEXT NOT NULL ," + // 1: saveDir
                "\"SAVE_FILE_NAME\" TEXT," + // 2: saveFileName
                "\"START_POSITION\" INTEGER NOT NULL ," + // 3: startPosition
                "\"CURRENT_LENGTH\" INTEGER NOT NULL ," + // 4: currentLength
                "\"END_POSITION\" INTEGER NOT NULL ," + // 5: endPosition
                "\"STATE\" INTEGER NOT NULL ," + // 6: state
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 7: createTime
                "\"ERROR_MSG\" TEXT);"); // 8: errorMsg
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HTTP_PART_TASK_ITEM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HttpPartTaskItemEntity entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getSaveDir());

        String saveFileName = entity.getSaveFileName();
        if (saveFileName != null) {
            stmt.bindString(3, saveFileName);
        }
        stmt.bindLong(4, entity.getStartPosition());
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getEndPosition());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getCreateTime());

        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(9, errorMsg);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HttpPartTaskItemEntity entity) {
        stmt.clearBindings();

        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getSaveDir());

        String saveFileName = entity.getSaveFileName();
        if (saveFileName != null) {
            stmt.bindString(3, saveFileName);
        }
        stmt.bindLong(4, entity.getStartPosition());
        stmt.bindLong(5, entity.getCurrentLength());
        stmt.bindLong(6, entity.getEndPosition());
        stmt.bindLong(7, entity.getState());
        stmt.bindLong(8, entity.getCreateTime());

        String errorMsg = entity.getErrorMsg();
        if (errorMsg != null) {
            stmt.bindString(9, errorMsg);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }

    @Override
    public HttpPartTaskItemEntity readEntity(Cursor cursor, int offset) {
        HttpPartTaskItemEntity entity = new HttpPartTaskItemEntity( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
                cursor.getString(offset + 1), // saveDir
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // saveFileName
                cursor.getLong(offset + 3), // startPosition
                cursor.getLong(offset + 4), // currentLength
                cursor.getLong(offset + 5), // endPosition
                cursor.getInt(offset + 6), // state
                cursor.getLong(offset + 7), // createTime
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // errorMsg
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, HttpPartTaskItemEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setSaveDir(cursor.getString(offset + 1));
        entity.setSaveFileName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStartPosition(cursor.getLong(offset + 3));
        entity.setCurrentLength(cursor.getLong(offset + 4));
        entity.setEndPosition(cursor.getLong(offset + 5));
        entity.setState(cursor.getInt(offset + 6));
        entity.setCreateTime(cursor.getLong(offset + 7));
        entity.setErrorMsg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
    }

    @Override
    protected final String updateKeyAfterInsert(HttpPartTaskItemEntity entity, long rowId) {
        return entity.getId();
    }

    @Override
    public String getKey(HttpPartTaskItemEntity entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HttpPartTaskItemEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
